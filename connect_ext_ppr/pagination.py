from fastapi import Query
from fastapi.routing import APIRoute
from fastapi_pagination import Params
from fastapi_pagination.api import _update_route, resolve_params
from fastapi_pagination.ext.sqlalchemy import paginate


class PaginationParams(Params):
    """Here we can redefine default size value"""
    size: int = Query(10, ge=1, le=100, description="Page size")


def add_pagination(routers):
    """Manually implement logic of add_pagination function from fastapi-pagination library"""
    auth, no_auth = routers
    for route in auth.routes:
        # Avoid starlette routes (autogenerated for documentation)
        if isinstance(route, APIRoute):
            _update_route(route)


def apply_pagination(query, db, params, response):
    """Apply pagination for the query
    * Paginate query according to applied parameters (size and page)
    * Add pagination headers to the response
    Don't filter or remove elements from query after the pagination
    """
    paginated = paginate(db, query, params)
    resolve_params(params)
    response.headers['X-Total-Count'] = str(paginated.total)
    response.headers['X-Current-Page'] = str(paginated.page)
    return paginated.items
